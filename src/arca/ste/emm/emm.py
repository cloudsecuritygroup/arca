##
## Copyright 2022 Zachary Espiritu
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##    http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##

from ..eds import EDS

from .multimap import Multimap

from abc import abstractmethod
from typing import Generic, List, Optional, TypeVar


KeyType = TypeVar("KeyType")
EdsType = TypeVar("EdsType")
MMKeyType = TypeVar("MMKeyType")
MMValueType = TypeVar("MMValueType")


class EMM(
    EDS[
        KeyType, Multimap[MMKeyType, MMValueType], EdsType, MMKeyType, List[MMValueType]
    ],
    Generic[KeyType, EdsType, MMKeyType, MMValueType],
):
    """
    An interface representing an encrypted multimap scheme.
    """

    @abstractmethod
    def generate_key(self) -> KeyType:
        """
        Generates a key for the encrypted multimap scheme.

        :return: a key
        """
        ...

    @abstractmethod
    def encrypt(
        self, key: KeyType, plaintext_mm: Multimap[MMKeyType, MMValueType]
    ) -> bytes:
        """
        Encrypts the given plaintext multimap with the given key
        and returns a byte string representing the encrypted multimap.

        :param key: the key to encrypt with, as generated from :func:`generate_key`
        :param plaintext_mm: the plaintext :class:`Multimap` to encrypt
        :return: a serialized encrypted multimap
        """
        ...

    @abstractmethod
    def load_eds(self, eds_bytes: bytes) -> EdsType:
        """
        Deserializes a byte string representing an encrypted multimap
        into the type needed by the :func:`query` algorithm.

        :param eds_bytes: a serialized encrypted multimap from :func:`encrypt`
        :return: a deserialized version of the encrypted multimap
        """
        ...

    @abstractmethod
    def token(self, key: KeyType, keyword: MMKeyType) -> bytes:
        """
        Generates a search token for the given key and keyword.

        :param key: the key to encrypt with
        :param keyword: the keyword to query the encrypted multimap with
        :return: a search token
        """
        ...

    @abstractmethod
    def query(self, token: bytes, eds: EdsType) -> Optional[bytes]:
        """
        Returns a result for the given search token queried over the
        given encrypted multimap.

        :param token: a search token generated by :func:`token`
        :param eds: the encrypted data structure from :func:`load_eds`
        :return: a serialized response to pass to :func:`resolve`
        """
        ...

    @abstractmethod
    def resolve(self, key: KeyType, response: bytes) -> List[MMValueType]:
        """
        Resolves the serialized response returned by the server into
        a native List[MMValueType].

        If the encrypted multimap is response-hiding, the given key is
        also used to decrypt the response.

        :param key: the key to decrypt with
        :param response: the serialized response from :func:`query`
        :return: a list of plaintext values
        """
        ...
